// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Planning.Migrations
{
    [DbContext(typeof(PlanningContext))]
    [Migration("20181113142623_postgresqlMigration")]
    partial class postgresqlMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Planning.Models.Holiday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("HolidayType");

                    b.Property<bool>("IsValidate");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("UserId");

                    b.Property<int>("ValidateUserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ValidateUserId");

                    b.ToTable("Holiday");
                });

            modelBuilder.Entity("Planning.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("OwnerId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Planning.Models.ProjectRight", b =>
                {
                    b.Property<int>("ProjectTaskId");

                    b.Property<int>("UserId");

                    b.HasKey("ProjectTaskId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectRight");
                });

            modelBuilder.Entity("Planning.Models.ProjectTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("ProjectId");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectTask");
                });

            modelBuilder.Entity("Planning.Models.ProjectTaskLine", b =>
                {
                    b.Property<int>("ProjectTaskId");

                    b.Property<int>("UserId");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("Date");

                    b.Property<TimeSpan>("Time");

                    b.HasKey("ProjectTaskId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectTaskLine");
                });

            modelBuilder.Entity("Planning.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<DateTime>("EnterDate");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<bool>("IsVisible");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Planning.Models.UserAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Path")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAccess");
                });

            modelBuilder.Entity("Planning.Models.UserCredential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.Property<DateTime>("Validity");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserCredential");
                });

            modelBuilder.Entity("Planning.Models.Holiday", b =>
                {
                    b.HasOne("Planning.Models.User", "User")
                        .WithMany("Holidays")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Planning.Models.User", "ValidateUser")
                        .WithMany()
                        .HasForeignKey("ValidateUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Planning.Models.Project", b =>
                {
                    b.HasOne("Planning.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Planning.Models.ProjectRight", b =>
                {
                    b.HasOne("Planning.Models.ProjectTask", "ProjectTask")
                        .WithMany("ProjectRights")
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Planning.Models.User", "User")
                        .WithMany("ProjectRights")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Planning.Models.ProjectTask", b =>
                {
                    b.HasOne("Planning.Models.Project", "Project")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Planning.Models.ProjectTaskLine", b =>
                {
                    b.HasOne("Planning.Models.ProjectTask", "ProjectTask")
                        .WithMany("ProjectTaskLines")
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Planning.Models.User", "User")
                        .WithMany("ProjectTaskLines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Planning.Models.UserAccess", b =>
                {
                    b.HasOne("Planning.Models.User", "User")
                        .WithMany("UserAccess")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Planning.Models.UserCredential", b =>
                {
                    b.HasOne("Planning.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
